package com.angelhack.moneygement.common.logging;

import com.p6spy.engine.logging.Category;
import com.p6spy.engine.spy.P6SpyOptions;
import com.p6spy.engine.spy.appender.MessageFormattingStrategy;
import jakarta.annotation.PostConstruct;
import org.springframework.context.annotation.Configuration;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;

import static org.hibernate.engine.jdbc.internal.FormatStyle.BASIC;
import static org.hibernate.engine.jdbc.internal.FormatStyle.DDL;

@Configuration
public class P6SpyCustomFormatStrategy implements MessageFormattingStrategy {

	@PostConstruct
	public void setLogMessageFormat() {
		P6SpyOptions.getActiveInstance().setLogMessageFormat(this.getClass().getName());
	}

	@Override
	public String formatMessage(int connectionId, String now, long elapsed, String category, String prepared, String sql, String url) {
		sql = formatSql(category, sql);
		String formattedNow = LocalDateTime.now().format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM));
		return String.format("%s | Elapsed Time : %sms | %s", formattedNow, elapsed, sql);
	}


	private String formatSql(String category, String sql) {
		if(sql == null || sql.trim().isBlank()) {
			return sql;
		}

		if(Category.STATEMENT.getName().equals(category)) {
			String tempSql = sql.trim();


			if(tempSql.startsWith("CREATE") || tempSql.startsWith("ALTER") || tempSql.startsWith("COMMENT")) {
				sql = DDL.getFormatter().format(tempSql);
			} else {
				sql = BASIC.getFormatter().format(tempSql);
			}

			sql = String.format("\n SQL generated by Hibernate : %s \n|", sql);
		}
		return sql;
	}

}